# Cross-platform build pipeline + NPM publish

name: $(Build.SourceVersion)
jobs:
- job: ArchDocker
  displayName: "Linux - Arch"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - script: docker build -t arch-libvim src/build/docker/arch
    displayName: 'docker build'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind arch-libvim /bin/bash -c 'echo hello'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind arch-libvim /bin/bash -c 'cd libvim/src && ls'
    displayName: 'docker run'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind arch-libvim /bin/bash -c 'cd libvim/src && pwd'
    displayName: 'docker run'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind arch-libvim /bin/bash -c 'cd libvim/src && esy @test install'
    displayName: 'docker run'
  - script: docker run --rm -i --mount src=`pwd`,target=/libvim,type=bind arch-libvim /bin/bash -c 'cd libvim/src && esy @test x run-tests.sh'
    displayName: 'docker run'

- job: AlpineDocker
  displayName: "Linux - Alpine 3.8 (Docker)"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - script: docker build -t alpine-libvim src/build/docker/alpine
    displayName: 'docker build'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind alpine-libvim /bin/bash -c 'esy --version'
    displayName: 'docker run'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind alpine-libvim /bin/bash -c 'cd libvim/src && ls'
    displayName: 'docker run'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind alpine-libvim /bin/bash -c 'cd libvim/src && pwd'
    displayName: 'docker run'
  - script: docker run --rm --mount src=`pwd`,target=/libvim,type=bind alpine-libvim /bin/bash -c 'cd libvim/src && esy install'
    displayName: 'docker run'
  - script: docker run --rm -i --mount src=`pwd`,target=/libvim,type=bind alpine-libvim /bin/bash -c 'cd libvim/src && esy build'

- job: UbuntuDocker
  displayName: "Linux - Ubuntu 18.04"
  pool:
    vmImage: 'Ubuntu 18.04'
  steps:
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests.sh

- job: UbuntuValgrind
  displayName: "Linux - Ubuntu 18.04 (VALGRIND)"
  pool:
    vmImage: 'Ubuntu 18.04'
  steps:
  - script: sudo apt-get update
    displayName: "apt-get update"
  - script: sudo apt-get --yes install valgrind
    displayName: "apt-get install valgrind"
  - script: valgrind --version
    displayName: "valgrind --version"
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests-valgrind.sh

- job: MacOS14
  displayName: "MacOS Mojave"
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests.sh

- job: MacOS15
  displayName: "MacOS Catalina"
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests.sh
    
- job: MacOS15XCode12
  displayName: "MacOS Catalina + XCode 12.2"
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: sudo xcode-select -s /Applications/Xcode_12.2.app
  - script: xcodebuild -version
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests.sh

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: .ci/esy-build-steps.yml
  - template: .ci/libvim-test.yml
    parameters:
        testRunner: run-tests.bat

- job: HygieneChecks
  displayName: "Hygiene Checks"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: .ci/check-hygiene.yml
